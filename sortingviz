import pygame
import random
import sys
from time import sleep

# Constants
SCREEN_WIDTH = 910
SCREEN_HEIGHT = 750
ARR_SIZE = 130
RECT_SIZE = 7

# Colors
WHITE = (170, 183, 184)
GREEN = (100, 180, 100)
PURPLE = (165, 105, 189)
BLUE = (1, 105, 189)
BLACK = (0, 0, 0)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SortingVisualizer:
    def __init__(self):
        self.arr = [0] * ARR_SIZE
        self.Barr = [0] * ARR_SIZE
        self.complete = False
        self.screen = None
        self.clock = pygame.time.Clock()
        
        # Initialize Pygame
        pygame.init()
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Sorting Visualizer")
        
        self.randomize_array()
        self.load_array()
    
    def randomize_array(self):
        self.Barr = [random.randint(10, SCREEN_HEIGHT-50) for _ in range(ARR_SIZE)]
    
    def load_array(self):
        self.arr = self.Barr.copy()
    
    def draw_array(self, highlights={}):
        self.screen.fill(BLACK)
        for i, val in enumerate(self.arr):
            color = WHITE
            if self.complete:
                color = GREEN
            else:
                if i == highlights.get('x', -1) or i == highlights.get('z', -1):
                    color = GREEN
                elif i == highlights.get('y', -1):
                    color = PURPLE
            
            rect = pygame.Rect(i*RECT_SIZE, SCREEN_HEIGHT-val, RECT_SIZE, val)
            if color == GREEN and self.complete:
                pygame.draw.rect(self.screen, color, rect, 1)
            else:
                pygame.draw.rect(self.screen, color, rect, 0)
        
        pygame.display.flip()
    
    def bubble_sort(self):
        for i in range(ARR_SIZE-1):
            for j in range(ARR_SIZE-1-i):
                if self.arr[j+1] < self.arr[j]:
                    self.arr[j], self.arr[j+1] = self.arr[j+1], self.arr[j]
                    self.draw_array({'x': j+1, 'y': j})
                    pygame.time.delay(1)
                yield
    
    # Implement other sorting algorithms similarly...
    
    def run(self):
        running = True
        algo = None
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        running = False
                    elif event.key == pygame.K_0:
                        self.randomize_array()
                        self.load_array()
                        self.complete = False
                    elif event.key == pygame.K_3:
                        self.load_array()
                        self.complete = False
                        algo = self.bubble_sort()
            
            if algo:
                try:
                    next(algo)
                except StopIteration:
                    self.complete = True
                    algo = None
            
            self.draw_array()
            self.clock.tick(60)
        
        pygame.quit()

if __name__ == "__main__":
    print("Controls:\n"
          "0 - Generate new array\n"
          "1-9 - Select sorting algorithms\n"
          "q - Quit")
    sv = SortingVisualizer()
    sv.run()